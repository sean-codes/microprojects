// this started as something
// then turned into something else
// kind of upside down :<
@use "sass:math";

html {
   background:#000;
}

html, body{
   padding:0px;
   margin:0px;
   font-family: 'Karla', sans-serif;
   height:100%;
}

// 404: naming convention not found :<
$barColor: #ddd;
$lgColor: #47d;
$smColor: darken($lgColor, 25);
$helix-width:750px;
$helix-height: 100px;
$bulbSize: 30px;
$animationSpeed: 1s;
$animationTimer: ease-out;

body {
   display:flex;
   overflow:hidden;
}

// reset
helix, helix * {
   box-sizing:border-box;
   display:block;
   border:none;
   padding:0;
   margin:0;
}

helix {
   display:flex;
   justify-content:space-between;

   width:$helix-width;
   height:$helix-height;
	margin:auto;

   transition: transform 0.25s;
   transform:scale(1);
   &:hover {
      transform:scale(1);
   }
	barContainer {
		height:$helix-height;
		display:flex;
		opacity:0;
		animation:in 0.5s forwards;
		overflow:visible;

	   bar {
	      max-width:10px;
	      min-width:10px;
	      height:$helix-height;
	      margin:auto;
	      background:$barColor;
	      border-radius:4px;
	      position:relative;
			overflow:visible;
	      animation:
				squish $animationSpeed $animationTimer infinite alternate;

	      &:after, &:before {
	         content: '';
	         width:$bulbSize;
	         height:$bulbSize;
	         border:3px solid $barColor;
	         position:absolute;
	         border-radius: 50%;
	      }

	      &:after {
	         top:0;
	         left:50%;
	         transform:translateX(-50%) translateY(-50%);
	         animation:
	            zindex $animationSpeed*2 $animationTimer infinite,
	            bulb-top $animationSpeed $animationTimer infinite alternate,
	            bulb-top-size $animationSpeed*2 $animationTimer infinite;
	      }

	      &:before {
	         bottom:0;
	         left:50%;
	         transform:translateX(-50%) translateY(50%);
	         animation:
	            zindex $animationSpeed*2 $animationTimer infinite,
	            bulb-bottom $animationSpeed $animationTimer infinite alternate,
	            bulb-bottom-size $animationSpeed*2 $animationTimer infinite;
	      }

	   }
		@for $i from 1 through 30 {
			$delay: math.div($i, 5) + 0.1s; 

			&:nth-of-type(#{$i}) {
				animation-delay: $i * 0.05s;
				bar {
					animation-delay: -$delay;

					&:after {
						animation-delay: -$delay;
					}

					&:before {
						animation-delay: -$animationSpeed - $delay;
					}
				}
			}
		}
	}

}

@keyframes squish {
   from { height:0 }
   to { height:$helix-height }
}

@keyframes zindex {
   0% { z-index: -2 }
   50% { z-index: -2 }
   50.01% { z-index: 2 }
   100% { z-index: 2 }
}

// should use transform here mister
@keyframes bulb-top {
   from { top: 0 }
   to { top: math.div($bulbSize, 2) * -1 }
}

@keyframes bulb-bottom {
   from { bottom: math.div($bulbSize, 2) * -1 }
   to { bottom: 0 }
}

// :<
@keyframes bulb-bottom-size {
   0% { background:$lgColor; width:$bulbSize; height:$bulbSize; }
   49.9% { background:$smColor; width:math.div($bulbSize,1.5); height:math.div($bulbSize,1.5); }
   50% { background:$lgColor; width:$bulbSize; height:$bulbSize;  }
   100% { background:$lgColor; width:$bulbSize; height:$bulbSize;  }
}

@keyframes bulb-top-size {
   0% { background:$smColor; width:math.div($bulbSize,1.5); height:math.div($bulbSize,1.5); }
   50% { background:$lgColor; width:$bulbSize; height:$bulbSize; }
   100% { background:$lgColor; width:$bulbSize; height:$bulbSize; }
}

@keyframes in {
	0% { opacity:0; transform:rotateZ(90deg); }
	100% { opacity:1; transform:none; }
}
